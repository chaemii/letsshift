import SwiftUI

struct ShiftTypeSelectView: View {
    @EnvironmentObject var shiftManager: ShiftManager
    @Environment(\.dismiss) var dismiss
    @State private var selectedPattern: ShiftPattern = .fiveThree
    @State private var showingTeamSelection = false
    
    var body: some View {
        NavigationView {
            VStack(spacing: 30) {
                VStack(spacing: 20) {
                    Text("근무 유형을 선택하세요")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    Text("근무 패턴에 따라 자동으로 일정이 생성됩니다")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
                
                VStack(spacing: 15) {
                    ForEach(ShiftPattern.allCases, id: \.self) { pattern in
                        ShiftTypeCard(
                            pattern: pattern,
                            isSelected: selectedPattern == pattern
                        ) {
                            selectedPattern = pattern
                        }
                    }
                }
                
                Spacer()
                
                Button("다음") {
                    shiftManager.settings.selectedPattern = selectedPattern
                    showingTeamSelection = true
                }
                .buttonStyle(PrimaryButtonStyle())
                .disabled(selectedPattern == .custom)
            }
            .padding()
            .navigationTitle("근무 유형")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("취소") {
                        dismiss()
                    }
                }
            }
            .sheet(isPresented: $showingTeamSelection) {
                TeamSelectView()
                    .environmentObject(shiftManager)
            }
        }
    }
}

struct ShiftTypeCard: View {
    let pattern: ShiftPattern
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                VStack(alignment: .leading, spacing: 8) {
                    Text(pattern.description)
                        .font(.headline)
                        .foregroundColor(isSelected ? .white : .primary)
                    
                    Text(getDescription(for: pattern))
                        .font(.caption)
                        .foregroundColor(isSelected ? .white.opacity(0.8) : .secondary)
                }
                
                Spacer()
                
                if isSelected {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.white)
                }
            }
            .padding()
            .background(isSelected ? Color.blue : Color.gray.opacity(0.1))
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func getDescription(for pattern: ShiftPattern) -> String {
        switch pattern {
        case .fiveThree:
            return "야간 → 심야 → 주간 → 휴무 → 비번"
        case .fourTwo:
            return "야간 → 심야 → 주간 → 휴무"
        case .threeShift:
            return "야간 → 주간 → 휴무"
        case .custom:
            return "직접 일정 입력"
        }
    }
}
